combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
count(combPred==diagnosis)
205/(128+205)
count(predrf==diagnosis)
216/(117+216)
count(predgbm==diagnosis)
count(predlda==diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength ~.,training,method="lasso")
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(modFit$finalModel, xvar = "penalty", use.color = TRUE)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("C:/Users/Joel/Documents/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("C:/Users/Joel/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages('forecast')
mod_ts <- bats(tstrain)
mod_ts <- forecast.bats(tstrain)
library(forecast)
mod_ts <- bats(tstrain)
fcast <- forecast(mod_ts, level = 95, h = dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[inTrain, ]
testing = concrete[-inTrain, ]
set.seed(325)
library(e1071)
mod_svm <- svm(CompressiveStrength ~ ., data = training)
pred_svm <- predict(mod_svm, testing)
accuracy(pred_svm, testing$CompressiveStrength)
version
version
packageStatus()
update.packages(checkBuilt=TRUE)
y
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
.libPaths()
install.packages("leaflet")
library(shiny)
library(leaflet)
m <- leaflet() %>% addTiles() %>% addMarkers(lng=174.768, let = -36.852,popup="The birthplace of R")
m <- leaflet() %>% addTiles() %>% addMarkers(lng=174.768, lat = -36.852,popup="The birthplace of R")
m
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
max(ballparks$END)
ballparks$END
sort(ballparks$END)
count(ballparks$END == "NA")
length(ballparks$END == "NA")
length(which(ballparks$END == "NA"))
length(which(ballparks$END == NA))
class(ballparks)
names(ballparks)
ballparks_leaf <- data.frame(name = ballparks$NAME, lat = ballparks$Latitude, lng = ballparks$Longitude)
ballparks_map <- leaflet() %>% addTiles() %>% addMarkers()
ballparks_map <- leaflet() %>% addTiles() %>% addMarkers(ballparks_leaf)
ballparks_map <- leaflet(ballparks_leaf) %>% addTiles() %>% addMarkers()
ballparks_map
ballparks_leaf <- data.frame(lat = ballparks$Latitude, lng = ballparks$Longitude, popup = ballparks$NAME)
ballparks_map <- leaflet(ballparks_leaf) %>% addTiles() %>% addMarkers()
ballparks_map
ballparks_leaf <- data.frame(lat = ballparks$Latitude, lng = ballparks$Longitude, popup = as.text(ballparks$NAME)
)
ballparks_leaf <- data.frame(lat = ballparks$Latitude, lng = ballparks$Longitude, popup = text(ballparks$NAME))
head(ballparks_leaf)
ballparks_leaf <- data.frame(lat = ballparks$Latitude, lng = ballparks$Longitude, popup = ballparks$NAME)
ballparks_map <- leaflet(ballparks_leaf) %>% addTiles() %>% addMarkers(popup=ballparks$NAME)
ballparks_map
head(ballaprks)
head(ballparks)
ballparks_active <- subset(ballparks, END=="NA")
ballparks_active <- subset(ballparks, ballparks$END=="NA")
ballparks_active <- subset(ballparks, ballparks$END==NA)
ballparks$END
ballparks$END[201]
ballparks_active <- subset(ballparks, ballparks$END=="")
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE, na.strings=c("","NA")
)
ballparks_active <- subset(ballparks, ballparks$END=="NA")
ballparks_active <- subset(ballparks, ballparks$END==NA)
head(ballparks)
ballparks$END[4]
ballparks$END[3]
ballparks_active <- subset(ballparks, ballparks$END=="")
ballparks
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE, na.strings=c(" ","NA")
)
ballparks_active <- subset(ballparks, ballparks$END=="NA")
ballparks_active <- subset(ballparks, ballparks$END==NA)
ballparks_active <- subset(ballparks, ballparks$END==" ")
ballparks_active <- subset(ballparks, ballparks$END=="")
ballparks <- read.csv("baseballstadiums.txt",  skip =0,
comment.char = "",check.names = FALSE, quote="",
na.strings=c("NA","NaN", " ") )
ballparks <- read.csv("baseballstadiums.csv",  skip =0,
comment.char = "",check.names = FALSE, quote="",
na.strings=c("NA","NaN", " ") )
)
ballparks <- read.csv("baseballstadiums.csv",  skip =0, comment.char = "",check.names = FALSE, quote="", na.strings=c("NA","NaN", " "))
ballparks_active <- subset(ballparks, ballparks$END=="NA")
ballparks_active <- subset(ballparks, ballparks$END==NA)
ballparks_active <- subset(ballparks, ballparks$END==" ")
ballparks_active <- subset(ballparks, ballparks$END=="")
class(baseball$END)
class(ballparks$END)
class(ballparks$END[3])
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
ballparks_active <- -t[which(ballparks$END >=1),]
ballparks_active <- -ballparks[which(ballparks$END >=1),]
ballparks_active <- ballparks[which(ballparks$END >=1),]
ballparks_active <- -(ballparks[which(ballparks$END >=1),])
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
ballparks$END <- as.numeric(as.character(ballparks$END))
ballparks$END
ballparks_active <- subset(ballparks, ballparks$END=="NA")
ballparks_active <- subset(ballparks, ballparks$END==NA)
ballparks_active <- ballparks[ballparks$END==NA]
ballparks_active <- ballparks[END==NA]
ballparks_active <- ballparks[ballparks$END==NA]
class(ballparks$END)
ballparks_active <- ballparks[ballparks$END=="NA"]
ballparks_active <- subset(ballparks, END==NA)
ballparks_active <- subset(ballparks, END=="NA")
ballparks_active <- subset(ballparks, END>1)
ballparks_active <- subset(ballparks, -(END>1)
)
ballparks_active <- subset(ballparks, !(END>1))
unactive <- subset(ballparks, END>1)
ballparks_active <- ballparks[!unactive]
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
ballparks[is.na(baseball$END)] <-""
ballparks[is.na(ballparks$END)] <-""
head(ballparks)
ballparks[is.nan(ballparks$END)] <-""
head(ballparks)
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE, na.strings=c(" ","NA")
)
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
head(ballparks)
library(data.table)
ballparks <- as.data.table(ballparks)
ballparks[END=="NA"]
ballparks[END==NA]
ballparks[Exact=="N"]
ballpark$END
ballparks$END
class(ballparks$END[201])
library(dplyr)
ballparks <- read.csv(file="baseballstadiums.csv", header=TRUE)
ballparks_split <- daply(ballparks, .END, >=1)
ballparks_split <- daply(ballparks, .(END), .(>=1)
ballparks_split <- daply(ballparks, .(END), .(>=1))
ballparks_split <- daply(ballparks, .(END), .(END>=1))
library(dtplyr)
install.packages(dtplyr)
install.packages("dtplyr")
ballparks_split <- daply(ballparks, .(END), .(END>=1))
library(plyr)
ballparks_split <- daply(ballparks, .(END), .(END>=1))
ballparks_split <- daply(ballparks, .(END), END>=1)
ballparks_split <- daply(ballparks, .(END), ballparks$END>=1)
ballparks_split <- daply(ballparks, .(END), function(ballparks) ballparks$END>=1)
retired <- ballparks[complete.cases(ballparks),]
retired <- ballparks[complete.cases(ballparks$END),]
active <- ballparks[!complete.cases(ballparks$END),]
active
active[20]
active[203]
active[203,]
active[25,]
active[24,]
active[26,]
active[27,]
active <- active[-27,]
active
active
View(active)
active$CAPACITY <- c(45483, 48114, 50096, 45971, 37949, 42495, 40615, 42319, 35225, 50445, 41681, 42060, 37903, 56000, 36742, 41900, 39021, 41922, 49642, 35067, 43651, 48633, 38362, 47476, 41915, 46861, 36973, 49282, 41418)
active$CAPACITY <- c(45483, 48114, 50096, 45971, 37949, 42495, 40615, 42319, 35225, 50445, 41681, 42060, 37903, 56000, 36742, 41900, 39021, 41922, 49642, 35067, 43651, 48633, 38362, 47476, 42524, 41915, 46861, 36973, 49282, 41418)
class(active$START)
class(active$CAPACITY)
active$OPENED <- as.character(active$START)
active$OPENED <- strtrim(active$OPENED, 4)
active$OPENED
ballparks_leaf <- data.frame(lat = ballparks$Latitude, lng = ballparks$Longitude)
ballparks_map <- leaflet(ballparks_leaf) %>% addTiles() %>% addMarkers(popup=ballparks$NAME)
ballparks_map
active_leaf <- data.frame(lat = active$Latitude, lng = active$Longitude)
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=active$NAME)
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup="active$NAME <br> active$CAPACITY")
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=active$NAME)
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=active$NAME&"<BR>"active$CAPACITY)
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=active$NAME&"<BR>"&active$CAPACITY)
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=active$NAME"<BR>"active$CAPACITY)
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste("",active$NAME,"<br>","Capacity:", active$CAPACITY))
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste(active$NAME,"<br>","Capacity:", active$CAPACITY))
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste(active$NAME,"<br>",active$CITY,", ", active$STATE,"<br>",Capacity:", active$CAPACITY))
)
)
)
asad
aewrwr
werwer
""
)
break
stop
exit
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste(active$NAME,"<br>",active$CITY,", ", active$STATE,"<br>Capacity:", active$CAPACITY))
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste(active$NAME,"<br>",active$CITY,", ", active$STATE,"<br>Opened:",active$OPENED,"<br>Capacity:", active$CAPACITY))
active_map
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste(active$NAME,"<br>",active$CITY", ", active$STATE,"<br>Opened:",active$OPENED,"<br>Capacity:", active$CAPACITY))
active_map <- leaflet(active_leaf) %>% addTiles() %>% addMarkers(popup=paste(active$NAME,"<br>",active$CITY,", ", active$STATE,"<br>Opened: ",active$OPENED,"<br>Capacity: ", active$CAPACITY,sep=""))
active_map
save.image("~/baseballstats/Rballparks.RData")
require(devtools)
install_github("BillPetti/baseballr")
require(baseballr)
install.packages("devtools")
install_github("BillPetti/baseballr")
require(devtools)
install_github("BillPetti/baseballr")
require(baseballr)
library(baseballr)
install.packages("XML2R")
install_github("BillPetti/baseballr")
library(XML2R)
require(devtools)
install_github("BillPetti/baseballr")
install.packages("hexbin")
require(devtools)
install_github("BillPetti/baseballr")
install.packages("Hmisc")
require(devtools)
install_github("BillPetti/baseballr")
library(baseballr)
fg_bat_leaders
fg_bat_leaders(2016,2016)
install.packages("selectr")
library(selectr)
fg_bat_leaders(2016,2016)
twentysixteen <- fg_bat_leaders(2016,2016)
library(plotly)
install.packages("plotly")
library(plotly)
names(twentysixteen)
plot_ly(x=twentysixteen$wRAA,y=twentysixteen$BsR,z=twentysixteen$Def,type="scatter3d",mode="markers")
plot_ly(x=twentysixteen$wRAA,y=twentysixteen$BsR,z=twentysixteen$Def,type="scatter3d",mode="markers",color=twentysixteen$WAR)
twenty12_16 <- fg_bat_leaders(2012,2016)
plot_ly(x=twenty12_16$wRAA,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR)
plot_ly(x=twenty12_16$wRAA,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,labels=twenty12_16$Name)
plot_ly(x=twenty12_16$wRAA,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,hoverinfo=twenty12_16$Name)
plot_ly(x=twenty12_16$wRAA,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name,layout(title="Mike Trout is Good",xaxis=list(title="Batting Runs"),yaxis=list(title="Fielding Runs"),zaxis=list(title="Baserunning Runs")))
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name,title="Mike Trout is good")
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name,uid="Mike Trout is good")
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name,textsrc="Mike Trout is good")
p <- plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
p <- plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name) %>% layout(scene=list(xaxis=list(title='Batting Runs'),))
p <- plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name) %>% layout(scene=list(xaxis=list(title='Batting Runs'),yaxis=(title='Fielding Runs'),zaxis=list(title='Baserunning Runs')))
p
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name) %>% layout(scene=list(xaxis=list(title='Batting Runs'),yaxis=(title='Fielding Runs'),zaxis=list(title='Baserunning Runs')))
p <- plot_ly(twenty12_16, x = ~Bat, y = ~BsR, z = ~Def, marker = list(color = ~WAR, showscale=TRUE))
p <- p %>% add_markers() %>% layout(scene = list(xaxis = list(title = 'Batting Runs'),
yaxis = list(title = 'Baserunning Runs'),
zaxis = list(title = 'Fielding Runs')))
p
p <- p %>% text= ~name
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name,height=800,width=1000)
plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name,height=700,width=1200)
p <- plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,type="scatter3d",mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
add_markers(p, title='Wow')
p
p <- plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
p
Batting <- twenty12_16$Bat
Baserunning <- twenty12_16$BsR
Fielding <- twenty12_16$Def
p <- plot_ly(x=Batting,y=Baserunning,z=Fielding,mode="markers",color=twenty12_16$WAR,text=twenty12_16$Name)
p
p <- plot_ly(x=twenty12_16$Bat,y=twenty12_16$BsR,z=twenty12_16$Def,color=twenty12_16$WAR,text=twenty12_16$Name)
p
p <- plot_ly(data=twenty12_16, x=~Bat,y=~BsR,z=~Def,mode="markers",color=twenty12_16$WAR,text=~Name)
p
p <- p %>% layout(title="A cloud of Players and Mike Trout",xaxis=list(title="Batting"),yaxis=list(title="Baserunning"),zaxis=(list(title="Fielding")))
p
WAR_stats <- data.frame(twenty12_16$Bat,twenty12_16$BsR,twenty12_16$Def,twenty12_16$Name)
names(WAR_stats)
class(WAR_stats)
names(WAR_stats) <- c("Batting","Baserunning","Fielding","Name")
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name)
p
WAR_stats <- data.frame(twenty12_16$Bat,twenty12_16$BsR,twenty12_16$Def,twenty12_16$Name,twenty12_16$WAR)
names(WAR_stats) <- c("Batting","Baserunning","Fielding","Name","WAR")
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name)
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text")
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(title="Total WAR"))
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),showlegend=T)
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),showlegend=T,legendgroup="x+y+z")
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),projection=list(y=list(opacity=.5)))
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),projection=list(y=list(opacity=.5,show=T)))
p
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text+x+y+z",marker=list(colorbar=list(title="Total WAR")))
p
library(baseballr)
library(plotly)
twenty12_16 <- fg_bat_leaders(2012,2016)
WAR_stats <- data.frame(twenty12_16$Bat,twenty12_16$BsR,twenty12_16$Def,twenty12_16$Name,twenty12_16$WAR)
names(WAR_stats) <- c("Batting","Baserunning","Fielding","Name","WAR")
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),height=500,width=900,aspectmode="data")
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),height=500,width=900,layout=list(aspectmode="data"))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),height=500,width=900,scene=list(yaxis=list(backgroundcolor="rgba(100,100,100")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),height=500,width=900,scene=list(aspectmode="data"))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),scene=list(aspectmode="data"))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",scene=list(aspectmode="data"),color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",scene(aspectmode="data"),color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",scene=dict(aspectmode="data"),color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",scene=list(bgcolor="red"),color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",scene=list(yaxis=list(autorange=FALSE),color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",scene=list(yaxis=list(autorange=FALSE)),color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),gay)
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),gay=fuckyou)
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),gay="fuckyou")
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),surfaceaxis="1")
p <- plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")),surfaceaxis="1")
add_trace(p, type="surface",z=~WAR_stats$WAR)
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
show()
dgamma()
predict()
lm()
colSums()
mean()
dgamma(wow)
install.packages(file.choose(C:/Desktop/DDPQuiz3_1.0zip),repos=NULL)
install.packages(file.choose(C:\Desktop\DDPQuiz3_1.0zip),repos=NULL)
install.packages(file.choose("C:/Desktop/DDPQuiz3_1.0zip),repos=NULL)
install.packages(file.choose("C:/Desktop/DDPQuiz3_1.0.zip"),repos=NULL)
library(DDPQuiz3)
install.packages(file.choose(),repos=NULL)
library(DDPQuiz3_1.0)
library(DDPQuiz3)
install.packages(c("curl", "data.table", "knitr"))
install.packages("webshot")
library(baseballr)
library(plotly)
twenty12_16 <- fg_bat_leaders(2012,2016)
WAR_stats <- data.frame(twenty12_16$Bat,twenty12_16$BsR,twenty12_16$Def,twenty12_16$Name,twenty12_16$WAR)
names(WAR_stats) <- c("Batting","Baserunning","Fielding","Name","WAR")
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
library(baseballr)
library(plotly)
library(webshot)
twenty12_16 <- fg_bat_leaders(2012,2016)
WAR_stats <- data.frame(twenty12_16$Bat,twenty12_16$BsR,twenty12_16$Def,twenty12_16$Name,twenty12_16$WAR)
names(WAR_stats) <- c("Batting","Baserunning","Fielding","Name","WAR")
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
library(baseballr)
library(plotly)
twenty12_16 <- fg_bat_leaders(2012,2016)
WAR_stats <- data.frame(twenty12_16$Bat,twenty12_16$BsR,twenty12_16$Def,twenty12_16$Name,twenty12_16$WAR)
names(WAR_stats) <- c("Batting","Baserunning","Fielding","Name","WAR")
plot_ly(data=WAR_stats, x=~Batting,y=~Baserunning,z=~Fielding,mode="markers",color=WAR_stats$WAR,text=~Name,hoverinfo="text",marker=list(colorbar=list(title="Total WAR")))
library(baseballr)
library(plotly)
twenty12_16 <- fg_bat_leaders(2012,2016)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Joel/Documents/Rprojects/SwiftKey")
news <- readLines("final/en_US/en_US.news.txt", encoding = "UTF-8", skipNul = TRUE)
blogs <- readLines("final/en_US/en_US.blogs.txt", encoding = "UTF-8", skipNul = TRUE)
twitter <- readLines("final/en_US/en_US.twitter.txt", encoding = "UTF-8", skipNul = TRUE)
library(tm)
## Sample the individual .txt files
news_sample <- sample(news, size = 20000, replace = TRUE)
blogs_sample <- sample(news, size = 20000, replace = TRUE)
twitter_sample <- sample(twitter, size = 20000,replace=TRUE)
## Create corpus
corpus <- c(news_sample, blogs_sample, twitter_sample)
## STILL SOME WEIRD CHARACTERS APPEARING
corpus <- sapply(corpus,function(row) iconv(row, "latin1", "ASCII", sub=""))
## Continue creating corpus
corpus <- Corpus(VectorSource(corpus))
## Remove unneeded huge files
rm(news); rm(blogs); rm(twitter)
rm(news_sample); rm(blogs_sample); rm(twitter_sample)
## Clean up corpus with simple functions
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, stripWhitespace)
corpus <- tm_map(corpus, content_transformer(tolower))
library(RWeka)
## [extremely Arnold voice] I am dah Tokenizater(s)
bigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min=2, max=2))
trigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min=3, max=3))
quadgramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min=4, max=4))
## Ngram makers
corpus_unigrams <- TermDocumentMatrix(corpus)
corpus_bigrams <- TermDocumentMatrix(corpus, control=list(tokenize=bigramTokenizer))
corpus_trigrams <- TermDocumentMatrix(corpus, control=list(tokenize=trigramTokenizer))
corpus_quadgrams <- TermDocumentMatrix(corpus, control=list(tokenize=quadgramTokenizer))
## Removing sparse terms because otherwise later functions do not work
corpus_unigrams <- removeSparseTerms(corpus_unigrams, 0.999)
corpus_bigrams <- removeSparseTerms(corpus_bigrams, 0.999)
corpus_trigrams <- removeSparseTerms(corpus_trigrams, 0.999)
corpus_quadgrams <- removeSparseTerms(corpus_quadgrams, 0.9999)
## Summing TermDocumentMatrices
unigram_freq <- sort(rowSums(as.matrix(corpus_unigrams)), decreasing=TRUE)
bigram_freq <- sort(rowSums(as.matrix(corpus_bigrams)), decreasing=TRUE)
trigram_freq <- sort(rowSums(as.matrix(corpus_trigrams)), decreasing=TRUE)
quadgram_freq <- sort(rowSums(as.matrix(corpus_quadgrams)), decreasing=TRUE)
quadgram_freq
head(quadgram_freq)
test <- sort(quadgram_freq,names(quadgram_freq))
view(quadgram_freq)
View(quadgram_freq)
View?
)
help(View)
quadgrams <- data.frame(names(quadgram_freq),quadgram_freq)
View(quadgrams)
trigrams <- data.frame(names(trigram_freq),trigram_freq)
View(trigrams)
bigrams <- data.frame(names(bigram_freq),bigram_freq)
View(bigrams)
knitr::opts_chunk$set(echo = FALSE)
library(baseballr)
fg2016 <- fg_bat_leaders(2016,2016)
names(fg2016)
head(fg2016)
fg2016 <- fg_bat_leaders(2016)
unique(fg2016$Team)
levels(fg2016$Team)
shiny::runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
fg2016 <- fg2016[which(fg2016$Team=="Angels")]
head(fg2016)
fg2016 <- fg_bat_leaders(2016,2016)
fg2016 <- fg2016[which(fg2016$Team=="Angels"),]
fg2016
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
fg2016
runApp('~/3dwar')
fg2016
runApp('~/3dwar')
?fg_bat_leaders()
runApp('~/3dwar')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jgoodbody', token='29047E07AA453D6C7B69E075936186D0', secret='2wOKyKVWpw8t8hOuv3Ad/NiJ5QOpZYPcyxiKqzHR')
shiny::runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
runApp('~/3dwar')
